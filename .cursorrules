# Vibe Coding System - Document Usage Algorithm

## üéØ ALGORITHM: How to Use Project Documents

### STEP 1: Initial Context Loading

```
1. READ this file (.cursorrules) FIRST
2. READ vibe_docs/task_on_hand.md SECOND
3. IF vibe_docs/project_context.md EXISTS:
   - READ vibe_docs/project_context.md
4. IF vibe_docs/technical_details.md EXISTS:
   - READ vibe_docs/technical_details.md
5. IF vibe_docs/development_log.md EXISTS:
   - READ last 20 entries
```

### STEP 2: Understand Current State

```
IF vibe_docs/task_on_hand.md has [DISCOVERY] status:
   - ASK questions from "Open Questions" section
   - UPDATE vibe_docs/task_on_hand.md with answers
   - CREATE/UPDATE other documents as needed
ELSE IF vibe_docs/task_on_hand.md has [DEVELOPMENT] status:
   - CHECK progress checkboxes
   - CONTINUE from last completed item
   - UPDATE progress after each step
```

### STEP 3: Document Update Rules

```
WHEN user provides project information:
   IF information is about WHAT the project is:
      - UPDATE vibe_docs/project_context.md
   IF information is about HOW to build:
      - UPDATE vibe_docs/technical_details.md
   IF information is a DECISION or CHANGE:
      - APPEND to vibe_docs/development_log.md
   ALWAYS:
      - UPDATE vibe_docs/task_on_hand.md progress
```

## üìÅ DOCUMENT PURPOSES

### `vibe_docs/task_on_hand.md`

- **READ**: Every session start
- **UPDATE**: After every conversation
- **CONTAINS**: Current work, questions, progress

### `vibe_docs/project_context.md`

- **READ**: When exists
- **UPDATE**: When learning what project is about
- **CONTAINS**: Business logic, users, goals, constraints

### `vibe_docs/technical_details.md`

- **READ**: When exists
- **UPDATE**: When making technical decisions
- **CONTAINS**: Stack, architecture, patterns, tools

### `vibe_docs/development_log.md`

- **READ**: Last entries for context
- **UPDATE**: Append only, never modify past entries
- **CONTAINS**: Decisions, changes, rationale, timestamps

## üîÑ DISCOVERY ALGORITHM

### STEP 4: Question Asking Protocol

```
WHILE project understanding < complete:
   1. CHECK vibe_docs/task_on_hand.md "Open Questions"
   2. ASK highest priority unanswered questions
   3. LISTEN to user response
   4. UPDATE appropriate document:
      - Business info ‚Üí vibe_docs/project_context.md
      - Technical info ‚Üí vibe_docs/technical_details.md
      - Current work ‚Üí vibe_docs/task_on_hand.md
   5. GENERATE new questions based on answers
   6. REPEAT until understanding is complete
```

### STEP 5: Progress Tracking

```
FOR each work session:
   1. UPDATE vibe_docs/task_on_hand.md checkboxes
   2. MOVE completed items to "Completed" section
   3. ADD new tasks as discovered
   4. UPDATE status (DISCOVERY ‚Üí PLANNING ‚Üí DEVELOPMENT)
   5. LOG significant events in vibe_docs/development_log.md
```

## üö® CRITICAL RULES

1. **NEVER ASSUME** - You have no memory from previous sessions
2. **WEB SEARCH** - Always rely on web search first to understand the issue or undestand the taks better.
3. **ALWAYS READ** - Documents in order specified above
4. **ALWAYS UPDATE** - Documentation after every interaction
5. **ALWAYS ASK** - When information is unclear or missing
6. **NEVER SKIP** - The discovery phase

## üìù DOCUMENT CREATION TRIGGERS

- **vibe_docs/project_context.md**: CREATE when first business requirement is provided
- **vibe_docs/technical_details.md**: CREATE when first technical decision is made
- **vibe_docs/development_log.md**: CREATE when starting actual development
- **Other files in vibe_docs/**: CREATE as specific needs arise (e.g., api_design.md, database_schema.md)

## ‚ö° QUICK REFERENCE

```
Session Start:
1. Read .cursorrules
2. Read task_on_hand.md
3. Read other existing docs
4. Check current status
5. Continue from last point

Information Flow:
- Questions ‚Üí Answers ‚Üí Documentation ‚Üí New Questions
- Generic ‚Üí Specific through iteration
- Discovery ‚Üí Planning ‚Üí Development ‚Üí Maintenance
- Co
```

Remember: **This system is self-improving. Update this file if you discover better patterns.**
**You may add additional documents but when you do udpate this (.cursorrules) to reflect it.**

------- add new important rules to improve your efficiency after this-----

## üìå TASK COMPLETION PROTOCOL

### AFTER EACH TASK IS COMPLETED:

```
1. UPDATE vibe_docs/task_on_hand.md:
   - Mark checkbox as [x] completed
   - Move task to "Completed" section if exists
   - Update status if phase is complete

2. UPDATE vibe_docs/development_log.md:
   - Add entry with timestamp
   - Document what was completed
   - Note any decisions made
   - Specify next steps

3. UPDATE relevant documentation:
   - IF business logic changed ‚Üí UPDATE vibe_docs/project_context.md
   - IF technical decisions made ‚Üí UPDATE vibe_docs/technical_details.md
   - IF new files created ‚Üí DOCUMENT in appropriate location

4. REVIEW progress:
   - Check if current phase is complete
   - Identify next priority tasks
   - Update "Next Steps" section
```

### DOCUMENTATION SYNC RULE:

**NEVER** complete a task without updating ALL relevant documentation.
This ensures the next session can start exactly where this one ended.

## üöÄ EFFICIENCY RULES

### USE CLI FOR QUICK TESTING:

```
1. VERIFY changes immediately:
   - After file creation ‚Üí ls -la to confirm
   - After file edits ‚Üí cat or head to verify
   - After moving files ‚Üí tree or ls to check structure

2. TEST functionality quickly:
   - Start servers to test endpoints
   - Run quick scripts to verify logic
   - Use curl/wget for API testing
   - Execute one-liners to validate

3. COMMON testing commands:
   - python -m http.server 8000  # Quick web server
   - python -c "import json; print(json.loads('{}'))"  # Test JSON
   - node -e "console.log('test')"  # Quick JS tests
   - curl -I http://localhost:8000  # Test endpoints
```

### SEARCH WEB FOR ERRORS:

```
WHEN encountering an error:
1. STOP after 2-3 failed attempts
2. SEARCH web immediately for:
   - Exact error message
   - Common solutions
   - Best practices

3. DON'T waste time:
   - Trying random fixes
   - Guessing at solutions
   - Making assumptions

4. SEARCH for:
   - "[Error message] + [technology]"
   - "How to [specific task] in [language/framework]"
   - "[Technology] best practices [year]"
```

### TIME-SAVING PRINCIPLES:

- **Test early, test often** - Don't wait to verify
- **Search first, implement second** - Learn from others
- **Use existing solutions** - Don't reinvent the wheel
- **Fail fast** - Quick tests reveal issues early

## üìö ADAPTIVE DOCUMENTATION SYSTEM

### GENERATE NEW DOCS AS PROJECT GROWS:

```
AS project scope expands, CREATE specialized documents:

1. WHEN API design is discussed:
   ‚Üí CREATE vibe_docs/api_design.md
   - Endpoints and methods
   - Request/response formats
   - Authentication details
   - Rate limiting rules

2. WHEN database schema is defined:
   ‚Üí CREATE vibe_docs/database_schema.md
   - Table structures
   - Relationships
   - Indexes and constraints
   - Migration strategy

3. WHEN UI/UX is planned:
   ‚Üí CREATE vibe_docs/ui_ux_guidelines.md
   - Design system
   - Component library
   - User flows
   - Accessibility standards

4. WHEN testing strategy is needed:
   ‚Üí CREATE vibe_docs/testing_strategy.md
   - Test types and coverage
   - Testing tools
   - CI/CD integration
   - Performance benchmarks

5. WHEN deployment is discussed:
   ‚Üí CREATE vibe_docs/deployment_guide.md
   - Environment setup
   - Configuration management
   - Monitoring and logging
   - Rollback procedures
```

### DOCUMENT CREATION RULES:

```
CREATE new document WHEN:
- Topic requires > 10 lines in existing docs
- Information is referenced multiple times
- Specialized knowledge needs organization
- Team members will need quick reference

NAMING CONVENTION:
- Use lowercase with underscores
- Be descriptive but concise
- Group related docs with prefixes
- Examples: api_endpoints.md, db_migrations.md

ALWAYS after creating new document:
1. ADD reference in .cursorrules
2. UPDATE task_on_hand.md with creation note
3. LOG in development_log.md
4. LINK from related documents
```

## üîç MISSING ELEMENTS CHECKLIST

### CHECK if project needs:

```
‚ñ° Error Handling Strategy
  ‚Üí CREATE vibe_docs/error_handling.md

‚ñ° Security Protocols
  ‚Üí CREATE vibe_docs/security_protocols.md

‚ñ° Performance Requirements
  ‚Üí CREATE vibe_docs/performance_metrics.md

‚ñ° Integration Points
  ‚Üí CREATE vibe_docs/integrations.md

‚ñ° User Stories/Use Cases
  ‚Üí CREATE vibe_docs/user_stories.md

‚ñ° Code Style Guide
  ‚Üí CREATE vibe_docs/code_standards.md

‚ñ° Git Workflow
  ‚Üí CREATE vibe_docs/git_workflow.md

‚ñ° Environment Variables
  ‚Üí CREATE vibe_docs/env_configuration.md

‚ñ° Troubleshooting Guide
  ‚Üí CREATE vibe_docs/troubleshooting.md

‚ñ° Release Notes Template
  ‚Üí CREATE vibe_docs/release_process.md
```

## üéØ CONTEXT PRESERVATION STRATEGIES

### PREVENT CONTEXT LOSS:

```
1. SUMMARY sections in each doc:
   - Add "## üìù Summary" at top
   - 3-5 bullet points of key info
   - Update when major changes occur

2. CROSS-REFERENCES between docs:
   - Link related sections
   - Use consistent terminology
   - Create index if > 10 docs

3. VISUAL AIDS when helpful:
   - ASCII diagrams for architecture
   - Flow charts for processes
   - Tables for comparisons

4. EXAMPLES for clarity:
   - Code snippets with context
   - Real-world scenarios
   - Common pitfalls to avoid
```

### REGULAR MAINTENANCE:

```
EVERY 5 sessions or major milestone:
1. REVIEW all documents for accuracy
2. CONSOLIDATE duplicate information
3. ARCHIVE outdated sections
4. UPDATE cross-references
5. REFACTOR if structure unclear
```

## üö¶ DECISION MAKING PROTOCOL

### WHEN FACING CHOICES:

```
1. DOCUMENT the decision point:
   - What needs to be decided?
   - What are the options?
   - What are the trade-offs?

2. ASK for user preference:
   - Present options clearly
   - Explain implications
   - Request specific guidance

3. RECORD the decision:
   - Choice made and why
   - Who made the decision
   - Date and context
   - Alternative options considered
```

## üîÑ SESSION HANDOFF PROTOCOL

### BEFORE ENDING SESSION:

```
1. COMPLETE current thought/task
2. UPDATE all modified documents
3. WRITE handoff note in task_on_hand.md:
   - What was just completed
   - What's in progress
   - Next immediate step
   - Any blockers or questions

4. COMMIT message style:
   "Session end: [what was done], next: [what to do]"
```

## üí° COMMON PATTERNS TO DOCUMENT

### ALWAYS CAPTURE:

```
- Authentication flows
- Data validation rules
- Business logic constraints
- Performance bottlenecks
- Security considerations
- Deployment procedures
- Rollback strategies
- Monitoring setup
- Error recovery processes
- User feedback loops
```

## üé® DOCUMENTATION QUALITY RULES

### WRITE for future LLMs:

```
- Use clear, unambiguous language
- Define acronyms on first use
- Include context for decisions
- Explain "why" not just "what"
- Use consistent formatting
- Add examples for complex concepts
- Keep sections focused and concise
```
